
DC_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015a  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000074  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bc  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000094  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014b  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <forward>:
#include <atmega/button.h>
void forward()
{
	PD0ON;
  6c:	90 9a       	sbi	0x12, 0	; 18
	PD1OFF;
  6e:	91 98       	cbi	0x12, 1	; 18
	PD2ON;
  70:	92 9a       	sbi	0x12, 2	; 18
	PD3OFF;
  72:	93 98       	cbi	0x12, 3	; 18
  74:	08 95       	ret

00000076 <backward>:
}

void backward()
{
	PD0OFF;
  76:	90 98       	cbi	0x12, 0	; 18
	PD1ON;
  78:	91 9a       	sbi	0x12, 1	; 18
	PD2OFF;
  7a:	92 98       	cbi	0x12, 2	; 18
	PD3ON;
  7c:	93 9a       	sbi	0x12, 3	; 18
  7e:	08 95       	ret

00000080 <left>:
}

void left()
{
	PD0OFF;
  80:	90 98       	cbi	0x12, 0	; 18
	PD1OFF;
  82:	91 98       	cbi	0x12, 1	; 18
	PD2ON;
  84:	92 9a       	sbi	0x12, 2	; 18
	PD3OFF;
  86:	93 98       	cbi	0x12, 3	; 18
  88:	08 95       	ret

0000008a <right>:
}
void right()
{
	PD0ON;
  8a:	90 9a       	sbi	0x12, 0	; 18
	PD1OFF;
  8c:	91 98       	cbi	0x12, 1	; 18
	PD2OFF;
  8e:	92 98       	cbi	0x12, 2	; 18
	PD3OFF;
  90:	93 98       	cbi	0x12, 3	; 18
  92:	08 95       	ret

00000094 <sharp_left>:
}
void sharp_left()
{
	PD0OFF;
  94:	90 98       	cbi	0x12, 0	; 18
	PD1ON;
  96:	91 9a       	sbi	0x12, 1	; 18
	PD2ON;
  98:	92 9a       	sbi	0x12, 2	; 18
	PD3OFF;
  9a:	93 98       	cbi	0x12, 3	; 18
  9c:	08 95       	ret

0000009e <sharp_right>:
}
void sharp_right()
{
	PD0ON;
  9e:	90 9a       	sbi	0x12, 0	; 18
	PD1OFF;
  a0:	91 98       	cbi	0x12, 1	; 18
	PD2OFF;
  a2:	92 98       	cbi	0x12, 2	; 18
	PD3ON;
  a4:	93 9a       	sbi	0x12, 3	; 18
  a6:	08 95       	ret

000000a8 <stop>:
}
void stop()
{
	PD0OFF;
  a8:	90 98       	cbi	0x12, 0	; 18
	PD1OFF;
  aa:	91 98       	cbi	0x12, 1	; 18
	PD2OFF;
  ac:	92 98       	cbi	0x12, 2	; 18
	PD3OFF;
  ae:	93 98       	cbi	0x12, 3	; 18
  b0:	08 95       	ret

000000b2 <main>:
#include <atmega/button.h>
#include <atmega/dcmotor.h>

int main(void)
{
	DDRA=0x00;
  b2:	1a ba       	out	0x1a, r1	; 26
	DDRD=0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
	PORTA=0xff;
  b8:	8b bb       	out	0x1b, r24	; 27
	
    while(1)
    {
		if (bta1)
  ba:	c8 99       	sbic	0x19, 0	; 25
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <main+0x12>
		{
			forward();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <forward>
  c2:	fb cf       	rjmp	.-10     	; 0xba <main+0x8>
		}
		else if(bta2)
  c4:	c9 99       	sbic	0x19, 1	; 25
  c6:	03 c0       	rjmp	.+6      	; 0xce <main+0x1c>
		{
			backward();
  c8:	0e 94 3b 00 	call	0x76	; 0x76 <backward>
  cc:	f6 cf       	rjmp	.-20     	; 0xba <main+0x8>
		}
		else if (bta3)
  ce:	ca 99       	sbic	0x19, 2	; 25
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x26>
		{
			left();
  d2:	0e 94 40 00 	call	0x80	; 0x80 <left>
  d6:	f1 cf       	rjmp	.-30     	; 0xba <main+0x8>
		} 
		else if (bta4)
  d8:	cb 99       	sbic	0x19, 3	; 25
  da:	03 c0       	rjmp	.+6      	; 0xe2 <main+0x30>
		{
			right();
  dc:	0e 94 45 00 	call	0x8a	; 0x8a <right>
  e0:	ec cf       	rjmp	.-40     	; 0xba <main+0x8>
		}
		else if (bta5)
  e2:	cc 99       	sbic	0x19, 4	; 25
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x3a>
		{
			sharp_left();
  e6:	0e 94 4a 00 	call	0x94	; 0x94 <sharp_left>
  ea:	e7 cf       	rjmp	.-50     	; 0xba <main+0x8>
		}
		else if (bta6)
  ec:	cd 99       	sbic	0x19, 5	; 25
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x44>
		{
			sharp_right();
  f0:	0e 94 4f 00 	call	0x9e	; 0x9e <sharp_right>
  f4:	e2 cf       	rjmp	.-60     	; 0xba <main+0x8>
		}
		else if (bta7)
  f6:	ce 99       	sbic	0x19, 6	; 25
  f8:	e0 cf       	rjmp	.-64     	; 0xba <main+0x8>
		{
			stop();
  fa:	0e 94 54 00 	call	0xa8	; 0xa8 <stop>
  fe:	dd cf       	rjmp	.-70     	; 0xba <main+0x8>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
