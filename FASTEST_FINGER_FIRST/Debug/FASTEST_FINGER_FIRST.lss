
FASTEST_FINGER_FIRST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e0  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000198  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000272  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a7  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000171  00000000  00000000  00000d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  7a:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcmd>:


void lcmd(char a)		//COMMAND ROUTIN
{	
	const int d=200;
	PORTB =a;
  82:	88 bb       	out	0x18, r24	; 24
	PORTC&=~(1<<PC0);	//TO MAKE SINGLE PIN AS LOW
  84:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=~(1<<PC1);
  86:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<PC2);	//TO MAKE SINGLE PIN AS HIGH
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e4       	ldi	r24, 0x4F	; 79
  8c:	93 ec       	ldi	r25, 0xC3	; 195
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcmd+0x12>
  94:	00 00       	nop
	_delay_ms(d);
	PORTC&=~(1<<PC2);
  96:	aa 98       	cbi	0x15, 2	; 21
  98:	8f e4       	ldi	r24, 0x4F	; 79
  9a:	93 ec       	ldi	r25, 0xC3	; 195
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcmd+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcmd+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <ldta>:
}

void ldta(char a)		//DATA ROUTIN
{
	const int d=200;
	PORTB =a;
  a6:	88 bb       	out	0x18, r24	; 24
	PORTC|=(1<<PC0);
  a8:	a8 9a       	sbi	0x15, 0	; 21
	PORTC&=~(1<<PC1);
  aa:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<PC2);
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	8f e4       	ldi	r24, 0x4F	; 79
  b0:	93 ec       	ldi	r25, 0xC3	; 195
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <ldta+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <ldta+0x12>
  b8:	00 00       	nop
	_delay_ms(d);
	PORTC&=~(1<<PC2);
  ba:	aa 98       	cbi	0x15, 2	; 21
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	93 ec       	ldi	r25, 0xC3	; 195
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <ldta+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <ldta+0x20>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <str>:
	for ( i=0;a[i]!='\0';i++);
	return i;
}

void str(char a[])
{
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	8c 01       	movw	r16, r24
  d8:	7c 01       	movw	r14, r24
	for(int i=0;i<strlen(a);i++)
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	06 c0       	rjmp	.+12     	; 0xec <str+0x22>
	ldta(a[i]);
  e0:	f7 01       	movw	r30, r14
  e2:	81 91       	ld	r24, Z+
  e4:	7f 01       	movw	r14, r30
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <ldta>
	return i;
}

void str(char a[])
{
	for(int i=0;i<strlen(a);i++)
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	f8 01       	movw	r30, r16
  ee:	01 90       	ld	r0, Z+
  f0:	00 20       	and	r0, r0
  f2:	e9 f7       	brne	.-6      	; 0xee <str+0x24>
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	e0 1b       	sub	r30, r16
  f8:	f1 0b       	sbc	r31, r17
  fa:	ce 17       	cp	r28, r30
  fc:	df 07       	cpc	r29, r31
  fe:	84 f3       	brlt	.-32     	; 0xe0 <str+0x16>
	ldta(a[i]);
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	08 95       	ret

0000010e <main>:

unsigned char seg[10]={0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6};
	
int main(void)
{
	DDRA=0x00;
 10e:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8b bb       	out	0x1b, r24	; 27
	DDRB=DDRC=DDRD=0xff;
 114:	81 bb       	out	0x11, r24	; 17
 116:	84 bb       	out	0x14, r24	; 20
 118:	87 bb       	out	0x17, r24	; 23
	lcmd(0X38);
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
	lcmd(0X0C);
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
			
		}
		else if (bta5)
		{	
			lcmd(0x01);
			PORTD=seg[5];
 126:	0f 2e       	mov	r0, r31
 128:	f5 e6       	ldi	r31, 0x65	; 101
 12a:	cf 2e       	mov	r12, r31
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	df 2e       	mov	r13, r31
 130:	f0 2d       	mov	r31, r0
			str("3.PLAYER 3");
		}
		else if (bta4)
		{
			lcmd(0x01);
			PORTD=seg[4];
 132:	0f 2e       	mov	r0, r31
 134:	f4 e6       	ldi	r31, 0x64	; 100
 136:	af 2e       	mov	r10, r31
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	bf 2e       	mov	r11, r31
 13c:	f0 2d       	mov	r31, r0
			str("2.PLAYER 2");
		}
		else if (bta3)
		{
			lcmd(0x01);
			PORTD=seg[3];
 13e:	0f 2e       	mov	r0, r31
 140:	f3 e6       	ldi	r31, 0x63	; 99
 142:	ef 2e       	mov	r14, r31
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ff 2e       	mov	r15, r31
 148:	f0 2d       	mov	r31, r0
		}
		else if (bta2)
		{
			lcmd(0x01);
	
			PORTD=seg[2];
 14a:	02 e6       	ldi	r16, 0x62	; 98
 14c:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
		if (bta1)
		{
			lcmd(0x01);
			PORTD=seg[1];
 14e:	c1 e6       	ldi	r28, 0x61	; 97
 150:	d0 e0       	ldi	r29, 0x00	; 0
	lcmd(0X38);
	lcmd(0X0C);
	
    while(1)
    {
		if (bta1)
 152:	c8 99       	sbic	0x19, 0	; 25
 154:	0f c0       	rjmp	.+30     	; 0x174 <main+0x66>
		{
			lcmd(0x01);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
			PORTD=seg[1];
 15c:	88 81       	ld	r24, Y
 15e:	82 bb       	out	0x12, r24	; 18
			PC3ON;
 160:	ab 9a       	sbi	0x15, 3	; 21
			PC4OFF;	
 162:	ac 98       	cbi	0x15, 4	; 21
			PC5OFF;
 164:	ad 98       	cbi	0x15, 5	; 21
			PC6OFF;
 166:	ae 98       	cbi	0x15, 6	; 21
			PC7OFF;	
 168:	af 98       	cbi	0x15, 7	; 21
			str("1.PLAYER 1");
 16a:	8a e6       	ldi	r24, 0x6A	; 106
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 65 00 	call	0xca	; 0xca <str>
 172:	ef cf       	rjmp	.-34     	; 0x152 <main+0x44>
		}
		else if (bta2)
 174:	c9 99       	sbic	0x19, 1	; 25
 176:	10 c0       	rjmp	.+32     	; 0x198 <main+0x8a>
		{
			lcmd(0x01);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
	
			PORTD=seg[2];
 17e:	f8 01       	movw	r30, r16
 180:	80 81       	ld	r24, Z
 182:	82 bb       	out	0x12, r24	; 18
			PC3OFF;
 184:	ab 98       	cbi	0x15, 3	; 21
			PC4ON;
 186:	ac 9a       	sbi	0x15, 4	; 21
			PC5OFF;
 188:	ad 98       	cbi	0x15, 5	; 21
			PC6OFF;
 18a:	ae 98       	cbi	0x15, 6	; 21
			PC7OFF;
 18c:	af 98       	cbi	0x15, 7	; 21
			str("2.PLAYER 2");
 18e:	85 e7       	ldi	r24, 0x75	; 117
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 65 00 	call	0xca	; 0xca <str>
 196:	dd cf       	rjmp	.-70     	; 0x152 <main+0x44>
		}
		else if (bta3)
 198:	ca 99       	sbic	0x19, 2	; 25
 19a:	10 c0       	rjmp	.+32     	; 0x1bc <main+0xae>
		{
			lcmd(0x01);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
			PORTD=seg[3];
 1a2:	f7 01       	movw	r30, r14
 1a4:	80 81       	ld	r24, Z
 1a6:	82 bb       	out	0x12, r24	; 18
			PC3OFF;
 1a8:	ab 98       	cbi	0x15, 3	; 21
			PC4OFF;
 1aa:	ac 98       	cbi	0x15, 4	; 21
			PC5ON;
 1ac:	ad 9a       	sbi	0x15, 5	; 21
			PC6OFF;
 1ae:	ae 98       	cbi	0x15, 6	; 21
			PC7OFF;
 1b0:	af 98       	cbi	0x15, 7	; 21
			str("3.PLAYER 3");
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 65 00 	call	0xca	; 0xca <str>
 1ba:	cb cf       	rjmp	.-106    	; 0x152 <main+0x44>
		}
		else if (bta4)
 1bc:	cb 99       	sbic	0x19, 3	; 25
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <main+0xca>
		{
			lcmd(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
			PORTD=seg[4];
 1c6:	f5 01       	movw	r30, r10
 1c8:	80 81       	ld	r24, Z
 1ca:	82 bb       	out	0x12, r24	; 18
			PC3OFF;
 1cc:	ab 98       	cbi	0x15, 3	; 21
			PC4OFF;
 1ce:	ac 98       	cbi	0x15, 4	; 21
			PC5OFF;
 1d0:	ad 98       	cbi	0x15, 5	; 21
			PC6ON;
 1d2:	ae 9a       	sbi	0x15, 6	; 21
			PC7OFF;
 1d4:	af 98       	cbi	0x15, 7	; 21
 1d6:	bd cf       	rjmp	.-134    	; 0x152 <main+0x44>
			
		}
		else if (bta5)
 1d8:	cc 99       	sbic	0x19, 4	; 25
 1da:	10 c0       	rjmp	.+32     	; 0x1fc <main+0xee>
		{	
			lcmd(0x01);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
			PORTD=seg[5];
 1e2:	f6 01       	movw	r30, r12
 1e4:	80 81       	ld	r24, Z
 1e6:	82 bb       	out	0x12, r24	; 18
			PC3OFF;
 1e8:	ab 98       	cbi	0x15, 3	; 21
			PC4OFF;
 1ea:	ac 98       	cbi	0x15, 4	; 21
			PC5OFF;
 1ec:	ad 98       	cbi	0x15, 5	; 21
			PC6OFF;
 1ee:	ae 98       	cbi	0x15, 6	; 21
			PC7ON;
 1f0:	af 9a       	sbi	0x15, 7	; 21
			str("5.PLAYER 5");
 1f2:	8b e8       	ldi	r24, 0x8B	; 139
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 65 00 	call	0xca	; 0xca <str>
 1fa:	ab cf       	rjmp	.-170    	; 0x152 <main+0x44>
			
		}
		else
		{
			lcmd(0x01);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 41 00 	call	0x82	; 0x82 <lcmd>
			PORTB=PORTC=PORTD=0x00;
 202:	12 ba       	out	0x12, r1	; 18
 204:	15 ba       	out	0x15, r1	; 21
 206:	18 ba       	out	0x18, r1	; 24
 208:	a4 cf       	rjmp	.-184    	; 0x152 <main+0x44>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
